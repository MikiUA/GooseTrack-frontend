{"version":3,"file":"static/js/757.9c191d80.chunk.js","mappings":"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","sources":["components/AuthForms/LoginForm/LoginForm.styled.jsx","components/AuthNavigate/AuthNavigate.styled.jsx","components/AuthNavigate/AuthNavigate.jsx","components/AuthForms/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { RiErrorWarningLine } from 'react-icons/ri';\nimport { IoIosCheckmarkCircleOutline } from 'react-icons/io';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Formik)`\n  max-width: 335px;\n`;\nexport const StyledFormInsight = styled(Form)`\n  width: 287px;\n  display: flex;\n  background-color: #ffffff;\n  flex-direction: column;\n  align-items: left;\n  text-align: left;\n  border-radius: 8px;\n  padding: 40px 24px;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 768px) {\n    width: 400px;\n    padding: 40px;\n  }\n  @media (max-width: 375px) {\n    width: fit-content;\n  }\n`;\n\nexport const StyledTitle = styled.h2`\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 24px;\n  color: #3e85f3;\n  @media screen and (min-width: 768px) {\n    font-size: 24px;\n    line-height: 24px;\n  }\n`;\nexport const StyledLabel = styled.label`\n  color: ${props => (props.isError ? 'red' : 'black' || 'inherit')};\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  margin-bottom: 8px;\n  margin-top: 8px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 14px;\n    line-height: 17px;\n  }\n`;\nexport const StyledInputWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\nexport const StyledIconError = styled(RiErrorWarningLine)`\n  position: absolute;\n  right: 15px;\n  top: 50%;\n  transform: translateY(-50%);\n`;\nexport const StyledIconChecked = styled(IoIosCheckmarkCircleOutline)`\n  position: absolute;\n  right: 15px;\n  top: 50%;\n  transform: translateY(-50%);\n`;\n\nexport const StyledInput = styled(Field)`\n  display: flex;\n  border: 1px solid rgba(220, 227, 229, 0.6);\n  border-radius: 8px;\n  padding: 14px;\n  &::placeholder {\n    color: #dce3e5;\n  }\n\n  &:focus {\n    outline: none;\n    border-color: black;\n  }\n  &:invalid {\n    border-color: red;\n    outline: none;\n  }\n\n  @media screen and (min-width: 768px) {\n    padding: 18px;\n  }\n`;\n\nexport const StyledButton = styled.button`\n  width: 287px;\n  height: 46px;\n  margin-top: 32px;\n  width: 100%;\n  background: #3e85f3;\n  box-shadow: 4px 2px 16px rgba(136, 165, 191, 0.48);\n  border-radius: 16px;\n  border-color: transparent;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 11px;\n  @media screen and (min-width: 768px) {\n    margin-top: 48px;\n  }\n`;\n\nexport const StyledSpanText = styled.p`\n  font-size: 14px;\n  @media screen and (min-width: 768px) {\n    font-size: 18px;\n  }\n`;\n\nexport const StyledSpan = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  margin-top: 8px;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 14px;\n  color: #da1414;\n`;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const RedirectLink = styled(NavLink)`\n  display: block;\n  margin-top: 18px;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 24px;\n  text-decoration-line: underline;\n  color: #3e85f3;\n  text-shadow: 0px 47px 355px rgba(0, 0, 0, 0.07),\n    0px 9.4px 57.6875px rgba(0, 0, 0, 0.035);\n\n  @media (min-width: 768px) {\n    margin-top: 24px;\n  }\n\n  :hover,\n  :focus {\n    color: #290b78;\n  }\n`;\n","import { RedirectLink } from './AuthNavigate.styled';\n\nexport const AuthNavigate = ({ redirect, nameLink }) => {\n  return (\n    <>\n      <RedirectLink to={redirect}>{nameLink}</RedirectLink>\n    </>\n  );\n};\n","import { useLoginMutation } from '../../../API/auth-operations';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  StyledFormInsight,\n  StyledTitle,\n  StyledLabel,\n  StyledInput,\n  StyledButton,\n  StyledError,\n  StyledInputWrap,\n  StyledIconError,\n  StyledIconChecked,\n  StyledSpan,\n  StyledSpanText,\n} from './LoginForm.styled';\nimport { Icon } from '@mui/material';\nimport { FiLogIn } from 'react-icons/fi';\nimport { setUserInfo } from 'API/userSlice';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { Box, CircularProgress } from '@mui/material';\n\nconst LoginForm = () => {\n  const [login] = useLoginMutation();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    try {\n      setIsLoading(true);\n      const { error, data } = await login(values);\n\n      if (error) {\n        alert(error.data.message);\n\n        setIsLoading(false);\n        return;\n      }\n\n      const { refreshToken, token, user } = data;\n\n      dispatch(setUserInfo(user));\n\n      localStorage.setItem('token', JSON.stringify(token));\n      localStorage.setItem('refreshToken', JSON.stringify(refreshToken));\n\n      setIsLoading(false);\n      resetForm();\n    } catch (error) {\n      setIsLoading(false);\n      console.error('Error occurred during form submission:', error);\n    }\n  };\n\n  return (\n    <StyledForm\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={Yup.object({\n        email: Yup.string().email().required(),\n        password: Yup.string().required().min(6),\n      })}\n      onSubmit={handleSubmit}\n    >\n      {formik => (\n        <StyledFormInsight>\n          <StyledTitle>Log In</StyledTitle>\n          <StyledLabel isError={formik.errors.email && formik.touched.email}>\n            Email\n          </StyledLabel>\n          <StyledInputWrap>\n            <StyledInput\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Your e-mail...\"\n            />\n            {formik.errors.email && formik.touched.email && (\n              <StyledIconError color=\"red\" />\n            )}\n            {formik.touched.email && !formik.errors.email && (\n              <StyledIconChecked color=\"green\" />\n            )}\n          </StyledInputWrap>\n          <StyledError name=\"email\" component=\"div\" />\n          <StyledLabel\n            isError={formik.errors.password && formik.touched.password}\n          >\n            Password\n          </StyledLabel>\n          <StyledInputWrap>\n            <StyledInput\n              type=\"password\"\n              name=\"password\"\n              placeholder={'\\u2022'.repeat(7)}\n            />\n            {formik.errors.password && formik.touched.password && (\n              <StyledIconError color=\"red\" />\n            )}\n            {formik.touched.password && !formik.errors.password && (\n              <StyledIconChecked color=\"green\" />\n            )}\n          </StyledInputWrap>\n          <StyledError name=\"password\" component=\"div\" />\n          <StyledButton type=\"submit\" disabled={isLoading}>\n            {isLoading ? (\n              <Box sx={{ display: 'flex' }}>\n                <CircularProgress sx={{ color: 'white' }} />\n              </Box>\n            ) : (\n              <StyledSpan>\n                <StyledSpanText>Log In</StyledSpanText>\n\n                <Icon\n                  component={FiLogIn}\n                  sx={{ width: '20px', height: '20px' }}\n                />\n              </StyledSpan>\n            )}\n          </StyledButton>\n        </StyledFormInsight>\n      )}\n    </StyledForm>\n  );\n};\n\nexport default LoginForm;\n","import styled from 'styled-components';\n\nexport const StyledDiv = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: #dcebf7;\n  position: fixed;\n`;\n\nexport const StyledLoginFormWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  min-width: 335px;\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n  @media (min-width: 768px) {\n    width: 480px;\n  }\n  @media (max-width: 375px) {\n    width: fit-content;\n    text-align: center;\n  }\n`;\n\nexport const StyledImg = styled.img`\n  display: none;\n\n  @media (min-width: 1440px) {\n    display: block;\n    width: 368px;\n    height: 521px;\n    position: absolute;\n    right: 60px;\n    bottom: 19px;\n  }\n`;\n","//LoginForm\n//AuthNanigate\n\nimport LoginForm from '../../components/AuthForms/LoginForm/LoginForm';\nimport { AuthNavigate } from '../../components/AuthNavigate';\nimport { StyledDiv, StyledLoginFormWrapper } from './LoginPage.styled';\nimport { StyledImg } from './LoginPage.styled';\n\nconst LoginPage = () => {\n  const redirectRegister = '/register';\n  return (\n    <StyledDiv>\n      <StyledLoginFormWrapper>\n        <LoginForm />\n        <AuthNavigate redirect={redirectRegister} nameLink=\"Sign up\" />\n      </StyledLoginFormWrapper>\n      <StyledImg\n        src={require('images/logIn+signup/Log-in-Img.png')}\n        srcset=\"images/logIn+signup/Log-in-Img.png, images/logIn+signup/Log-in-Img@2x.png 2x\"\n        alt=\"Goose\"\n      />\n    </StyledDiv>\n  );\n};\n\nexport default LoginPage;\n"],"names":["StyledForm","styled","Formik","StyledFormInsight","Form","StyledTitle","StyledLabel","props","isError","StyledInputWrap","StyledIconError","RiErrorWarningLine","StyledIconChecked","IoIosCheckmarkCircleOutline","StyledInput","Field","StyledButton","StyledSpanText","StyledSpan","StyledError","ErrorMessage","RedirectLink","NavLink","AuthNavigate","redirect","nameLink","to","useLoginMutation","login","useState","isLoading","setIsLoading","dispatch","useDispatch","handleSubmit","values","resetForm","error","data","alert","message","refreshToken","token","user","setUserInfo","localStorage","setItem","JSON","stringify","console","initialValues","email","password","validationSchema","Yup","required","min","onSubmit","formik","errors","touched","type","name","placeholder","color","component","repeat","disabled","Box","sx","display","CircularProgress","Icon","FiLogIn","width","height","StyledDiv","StyledLoginFormWrapper","StyledImg","src","require","srcset","alt"],"sourceRoot":""}